# üöÄ Script de Setup Automatizado - Sistema de Triagem ODQ Web (Windows)

param(
    [switch]$SkipChecks = $false
)

Write-Host "üöÄ Iniciando setup do Sistema de Triagem ODQ Web..." -ForegroundColor Blue
Write-Host "==================================================" -ForegroundColor Blue
Write-Host ""

# Fun√ß√µes auxiliares
function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)  
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# Verificar se est√° no diret√≥rio correto
if (-not (Test-Path "README.md") -or -not (Test-Path "backend") -or -not (Test-Path "frontend")) {
    Write-Error "Execute este script no diret√≥rio triagem-web\"
    exit 1
}

if (-not $SkipChecks) {
    Write-Info "Verificando pr√©-requisitos..."

    # Verificar Node.js
    try {
        $nodeVersion = node --version
        Write-Success "Node.js $nodeVersion encontrado"
    }
    catch {
        Write-Error "Node.js n√£o encontrado. Instale Node.js 18+ antes de continuar."
        Write-Host "Download: https://nodejs.org/" -ForegroundColor Yellow
        exit 1
    }

    # Verificar Python
    try {
        $pythonVersion = python --version
        Write-Success "$pythonVersion encontrado"
    }
    catch {
        Write-Error "Python n√£o encontrado. Instale Python 3.9+ antes de continuar."
        Write-Host "Download: https://python.org/downloads/" -ForegroundColor Yellow
        exit 1
    }

    # Verificar pip
    try {
        pip --version | Out-Null
        Write-Success "pip encontrado"
    }
    catch {
        Write-Error "pip n√£o encontrado. Reinstale Python com pip inclu√≠do."
        exit 1
    }
}

Write-Host ""
Write-Host "üõ†Ô∏è  Configurando Backend..." -ForegroundColor Blue  
Write-Host "==========================" -ForegroundColor Blue

Set-Location backend

# Criar ambiente virtual
Write-Info "Criando ambiente virtual Python..."
python -m venv venv

# Ativar ambiente virtual
Write-Info "Ativando ambiente virtual..."
if (Test-Path "venv\Scripts\activate.ps1") {
    & "venv\Scripts\activate.ps1"
    Write-Success "Ambiente virtual ativado"
} elseif (Test-Path "venv\Scripts\Activate.ps1") {
    & "venv\Scripts\Activate.ps1" 
    Write-Success "Ambiente virtual ativado"
} else {
    Write-Error "N√£o foi poss√≠vel ativar o ambiente virtual"
    exit 1
}

# Instalar depend√™ncias
Write-Info "Instalando depend√™ncias Python..."
python -m pip install --upgrade pip
pip install -r requirements.txt

Write-Success "Depend√™ncias Python instaladas"

# Criar arquivo .env se n√£o existir
if (-not (Test-Path ".env")) {
    Write-Info "Criando arquivo .env..."
    
    # Gerar chave secreta
    $secretKey = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes([System.Guid]::NewGuid().ToString()))
    
    $envContent = @"
# Configura√ß√µes de desenvolvimento
ENVIRONMENT=development
SECRET_KEY=$secretKey
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=1440

# Banco de dados local (substitua pela URL do Railway em produ√ß√£o)
DATABASE_URL=postgresql://postgres:password@localhost:5432/triagem_odq

# Gmail (opcional - preencha se necess√°rio)
GMAIL_USERNAME=
GMAIL_APP_PASSWORD=

# Microsoft 365 (opcional - preencha se necess√°rio)
MS_CLIENT_ID=
MS_CLIENT_SECRET=
MS_TENANT_ID=
MS_REDIRECT_URI=http://localhost:8000/auth/callback

# Configura√ß√µes de upload
MAX_FILE_SIZE=50MB
ALLOWED_EXTENSIONS=pdf,doc,docx,txt

# Redis (opcional)
REDIS_URL=redis://localhost:6379

# Debug
DB_ECHO=false
"@
    
    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Success "Arquivo .env criado. EDITE o arquivo com suas configura√ß√µes!"
    Write-Warning "Abra backend\.env e configure suas credenciais antes de continuar"
} else {
    Write-Info "Arquivo .env j√° existe"
}

Set-Location ..

Write-Host ""
Write-Host "üåê Configurando Frontend..." -ForegroundColor Blue
Write-Host "==========================" -ForegroundColor Blue

Set-Location frontend

# Instalar depend√™ncias
Write-Info "Instalando depend√™ncias Node.js..."
npm install

Write-Success "Depend√™ncias Node.js instaladas"

# Criar arquivo .env.local se n√£o existir
if (-not (Test-Path ".env.local")) {
    Write-Info "Criando arquivo .env.local..."
    
    $envLocalContent = @"
# Configura√ß√µes de desenvolvimento
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
NEXT_PUBLIC_APP_NAME=Sistema de Triagem ODQ
NEXT_PUBLIC_ENVIRONMENT=development
"@
    
    $envLocalContent | Out-File -FilePath ".env.local" -Encoding UTF8
    Write-Success "Arquivo .env.local criado"
} else {
    Write-Info "Arquivo .env.local j√° existe"
}

Set-Location ..

Write-Host ""
Write-Host "‚úÖ Setup Conclu√≠do!" -ForegroundColor Green
Write-Host "==================" -ForegroundColor Green

Write-Success "Backend configurado em: .\backend\"
Write-Success "Frontend configurado em: .\frontend\"

Write-Host ""
Write-Host "üöÄ Pr√≥ximos Passos:" -ForegroundColor Blue
Write-Host "==================="
Write-Host "1. Configure suas credenciais em backend\.env"
Write-Host "2. Configure um banco PostgreSQL (local ou Railway)"
Write-Host "3. Execute os comandos abaixo para iniciar:"
Write-Host ""
Write-Host "   # Terminal 1 - Backend (PowerShell)" -ForegroundColor Yellow
Write-Host "   cd backend"
Write-Host "   .\venv\Scripts\Activate.ps1"
Write-Host "   uvicorn main:app --reload"
Write-Host ""
Write-Host "   # Terminal 2 - Frontend" -ForegroundColor Yellow
Write-Host "   cd frontend"
Write-Host "   npm run dev"
Write-Host ""
Write-Host "4. Acesse http://localhost:3000 no navegador"
Write-Host ""

Write-Host "üìö Para deploy em produ√ß√£o:" -ForegroundColor Blue
Write-Host "============================"
Write-Host "‚Ä¢ Backend: Siga instru√ß√µes em README.md se√ß√£o 'Deploy do Backend (Railway)'"
Write-Host "‚Ä¢ Frontend: Siga instru√ß√µes em README.md se√ß√£o 'Deploy do Frontend (Netlify)'"
Write-Host ""

Write-Success "Setup automatizado conclu√≠do! üéâ"

# Perguntar se quer abrir os arquivos de configura√ß√£o
$openConfigs = Read-Host "Deseja abrir os arquivos de configura√ß√£o agora? (y/N)"
if ($openConfigs -eq "y" -or $openConfigs -eq "Y") {
    if (Test-Path "backend\.env") {
        notepad "backend\.env"
    }
    if (Test-Path "frontend\.env.local") {
        notepad "frontend\.env.local"
    }
}